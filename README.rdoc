== Anonymail Project

The following inputs would be useful:
* I'm using AnonyMail as the working name for the project, will use it in logo text but not hard set it anywhere, if the service name is decided I can use that, and also design a working logo around it to help lay out the front page
* Will build a skeletal layout with some nice design tweaks, but this is simply for the purpose of presentation of functionality. If you're happy with keeping the design that way, that's fine, otherwise I'm open to suggestions.
* Any copy or sample text to be used in the layouts would also be useful, but not critical, can use lorem ipsum text for now
* Any details on required level of testing (unit/functional/integration)

=== Progress

* Rake task added which uses the MailQueue.dispatch function to pull the items waiting in the mail queue. At present time this delivers text-based mail. This will be connected into the scheduler add-on to Heroku, or a crontab if hosted on another server.
* Devise authentication set up to work via API using an auth token instead of session-based management

=== Additions (still to be added)

* Addition of rolify gem to provide separation of user and admin roles, redirect an admin straight to the admin account on sign-in
* Add Attachment saving to email storage, best to keep these in S3 rather than in memory in Redis

=== Redis Resources:
* mail_queue -> list of mail GUIDs, these will be popped out of the list by background job and the mail dispatched
* mailbox_uid -> mailbox with the suffix of the user's anonymous email address prefix, contains a list of mail_guids
* mail_guid -> will contain the contents of the message along with any metadata, either json encoded or as a hash
* mail_errors -> contains a list of delivery errors

=== API Usage

Note: This should be done over an SSL connection if they API is located on a different server, as the credentials will be supplied/returned in plaintext

* User login is accomplished by first acquiring a token via passing login credentials via POST params to /api/tokens.json, the result will be an auth_token used to achieve authentication on subsequence requests

=== API Description:
  * User
    * /api/tokens.json
        * methods ->
          * CREATE
          * DESTROY
        * In order to log in, the user passes an email and password as post params to this endpoint, if successful it will return {token: <auth_token>} which will be used in subsequent requests to verify the user's credentials
